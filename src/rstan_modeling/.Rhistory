png('/users/lukas/desktop/schematic.png', units="in", width=8, height=4, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\ncomparison > standard\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\ncomparison > standard\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.0001)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 2, 5)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
p2 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette)+
ggtitle("Type B error")+
ggthemes::theme_tufte()+
ylab("")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,margin = margin(t = 0, r = 20, b = 0, l = 0),
angle = 360))
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
plot_grid(p1, p2,
rel_widths = c(1.1, 1))
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2,
rel_widths = c(1.1, 1))
dev.off()
plot_grid(p1, p2,
rel_widths = c(1.08, 1))
plot_grid(p1, p2,
rel_widths = c(1, 1))
rgamma(1e4, 5, 1/1.5)
rgamma(1e4, 5, 1/1.5) %>% hist(breaks=100)
rgamma(1e4, 5, 1/1.5)
library(tidyverse)
rgamma(1e4, 5, 1/1.5) %>% hist(breaks=100)
rgamma(1e4, 5, 1.5) %>% hist(breaks=100)
rgamma(1e4, 5, 1/0.5) %>% hist(breaks=100)
rgamma(1e4, 2.5, 2) %>% hist(breaks=100)
rgamma(1e5, 2.5, 2) %>% hist(breaks=100)
n_condition <- 4
x <- 1:4
x
conditions <- 1:n_condition
rep(conditions, 2)
800
n_obs <- 800
n_condition = 4
obs_per_condition <- integer(n_obs / n_condition)
obs_per_condition
n_obs / n_condition
integer(n_obs / n_condition)
as.integer(n_obs / n_condition)
conditions <- 1:n_condition
context <- rep(conditions, obs_per_condition)
obs_per_condition
obs_per_condition <- as.integer(n_obs / n_condition)
conditions <- 1:n_condition
context <- rep(conditions, obs_per_condition)
context
context <- sample(context, replace = F)
context
diffusion_prior <- function(n_condition=4){
v     <- rgamma(n_condition, 2.5, 1.5)
a     <- rgamma(1, 4.0, 3.0)
ndt   <- rgamma(1, 1.5, 5.0)
return(c(v, a, ndt))
}
params  <- diffusion_prior()
params
params[n_condition + 1]
params[n_condition + 2]
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("wienerProcess.R")
diffusion_prior <- function(n_condition=4){
v     <- rgamma(n_condition, 2.5, 1.5)
a     <- rgamma(1, 4.0, 3.0)
ndt   <- rgamma(1, 1.5, 5.0)
return(c(v, a, ndt))
}
generate_context <- function(n_obs, n_condition=4){
obs_per_condition <- as.integer(n_obs / n_condition)
conditions <- 1:n_condition
context <- rep(conditions, obs_per_condition)
context <- sample(context, replace = F)
return(context)
}
static_diffusion_simulator <- function(n_obs, n_condition, params=NA){
if (is.na(params[1])){
params  <- diffusion_prior()
}
context <- generate_context(n_obs, n_condition)
rt   <- integer(n_obs)
resp <- integer(n_obs)
for (i in 1:n_obs){
rt[i] <- wienerProcess(params[context[i]], params[n_condition + 1], 0.5, params[n_condition + 2])
resp[i] <- ifelse(rt[i] >= 0, 1, 0)
}
return(list("data" = data_frame("context" = context,
"resp"    = resp,
"rt"      = rt,
"rt_abs"  = abs(rt)),
"params" = params))
}
n_obs <- 800
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
simulation$data
simulation$params
simulation$data
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
View(tmp_sim_data)
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
View(tmp_sim_data)
true_param <- simulation$params
true_param
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
View(tmp_sim_data)
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
View(tmp_sim_data)
true_param <- simulation$params
true_param
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
true_param <- simulation$params
true_param
# store data and true parameters
tmp_sim_data <- simulation$data
View(tmp_sim_data)
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
true_param <- simulation$params
true_param
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
true_param <- simulation$params
true_param
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
true_param <- simulation$params
true_param
# store data and true parameters
tmp_sim_data <- simulation$data
View(tmp_sim_data)
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
# create stan data list
stan_data = list(
N         = nrow(tmp_sim_data),
correct   = tmp_sim_data$resp,
rt        = tmp_sim_data$rt_abs,
min_rt    = min(tmp_sim_data$rt_abs),
stim_type = tmp_sim_data$context)
# fit model
fit <- stan("static_ddm.stan",
init=init(4),
data=stan_data,
chains=4,
iter = 2000,
cores=parallel::detectCores())
#------------------------------------------------------------------------#
# Simulation & Fitting
#------------------------------------------------------------------------#
# set initial values
init = function(chains=4) {
L = list()
for (c in 1:chains) {
L[[c]]=list()
L[[c]]$v   = runif(2, 0.5, 4.0)
L[[c]]$a   = runif(1, 0.5, 2.5)
L[[c]]$ndt = runif(1, 0.01, 0.01)
}
return (L)}
#------------------------------------------------------------------------#
# Simulation & Fitting
#------------------------------------------------------------------------#
# set initial values
init = function(chains=4) {
L = list()
for (c in 1:chains) {
L[[c]]=list()
L[[c]]$v   = runif(4, 0.5, 4.0)
L[[c]]$a   = runif(1, 0.5, 2.5)
L[[c]]$ndt = runif(1, 0.01, 0.01)
}
return (L)}
# fit model
fit <- stan("static_ddm.stan",
init=init(4),
data=stan_data,
chains=4,
iter = 2000,
cores=parallel::detectCores())
# fit model
fit <- stan("static_ddm.stan",
init=init(4),
data=stan_data,
chains=4,
iter = 2000,
cores=parallel::detectCores())
# simulate data
simulation <- static_diffusion_simulator(n_obs, 2)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
# create stan data list
stan_data = list(
N       = nrow(tmp_sim_data),
correct = tmp_sim_data$resp,
rt      = tmp_sim_data$rt_abs,
min_rt  = min(tmp_sim_data$rt_abs),
context = tmp_sim_data$context)
# fit model
fit <- stan("static_ddm.stan",
init=init(4),
data=stan_data,
chains=4,
iter = 2000,
cores=parallel::detectCores())
# store parameter summary stats
tmp_summary <- as_tibble(summary(fit, pars=c("v[1]", "v[2]", "a", "ndt"))$summary, rownames="parameter")
# store true parameters
tmp_summary <- tmp_summary %>%
mutate(true_param = true_param)
# store parameter summary stats
tmp_summary <- as_tibble(summary(fit, pars=c("v[1]", "v[2]", "v[3]", "v[4]", "a", "ndt"))$summary, rownames="parameter")
# store true parameters
tmp_summary <- tmp_summary %>%
mutate(true_param = true_param)
View(tmp_summary)
View(wienerProcess)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("wienerProcess.R")
diffusion_prior <- function(n_condition=4){
v     <- rgamma(n_condition, 2.5, 1.5)
a     <- rgamma(1, 4.0, 3.0)
ndt   <- rgamma(1, 1.5, 5.0)
return(c(v, a, ndt))
}
generate_context <- function(n_obs, n_condition=4){
obs_per_condition <- as.integer(n_obs / n_condition)
conditions <- 1:n_condition
context <- rep(conditions, obs_per_condition)
context <- sample(context, replace = F)
return(context)
}
params  <- diffusion_prior()
context <- generate_context(n_obs, n_condition)
n_obs <- 800
context <- generate_context(n_obs, n_condition)
static_diffusion_simulator <- function(n_obs, n_condition, params=NA){
if (is.na(params[1])){
params  <- diffusion_prior()
}
context <- generate_context(n_obs, n_condition)
rt   <- integer(n_obs)
resp <- integer(n_obs)
for (i in 1:n_obs){
rt[i] <- wienerProcess(v=params[context[i]], a=params[n_condition + 1], ndt=params[n_condition + 2])
resp[i] <- ifelse(rt[i] >= 0, 1, 0)
}
return(list("data" = data_frame("context" = context,
"resp"    = resp,
"rt"      = rt,
"rt_abs"  = abs(rt)),
"params" = params))
}
params  <- diffusion_prior()
context <- generate_context(n_obs, n_condition)
n_condition=4
context <- generate_context(n_obs, n_condition)
rt   <- integer(n_obs)
resp <- integer(n_obs)
rt[i] <- wienerProcess(v=params[context[i]], a=params[n_condition + 1], ndt=params[n_condition + 2])
static_diffusion_simulator <- function(n_obs, n_condition, params=NA){
if (is.na(params[1])){
params  <- diffusion_prior()
}
context <- generate_context(n_obs, n_condition)
rt   <- integer(n_obs)
resp <- integer(n_obs)
for (i in 1:n_obs){
rt[i] <- wienerProcess(v=params[context[i]], a=params[n_condition + 1], ndt=params[n_condition + 2])
resp[i] <- ifelse(rt[i] >= 0, 1, 0)
}
return(list("data" = data_frame("context" = context,
"resp"    = resp,
"rt"      = rt,
"rt_abs"  = abs(rt)),
"params" = params))
}
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("wienerProcess.R")
diffusion_prior <- function(n_condition=4){
v     <- rgamma(n_condition, 2.5, 1.5)
a     <- rgamma(1, 4.0, 3.0)
ndt   <- rgamma(1, 1.5, 5.0)
return(c(v, a, ndt))
}
generate_context <- function(n_obs, n_condition=4){
obs_per_condition <- as.integer(n_obs / n_condition)
conditions <- 1:n_condition
context <- rep(conditions, obs_per_condition)
context <- sample(context, replace = F)
return(context)
}
static_diffusion_simulator <- function(n_obs, n_condition, params=NA){
if (is.na(params[1])){
params  <- diffusion_prior()
}
context <- generate_context(n_obs, n_condition)
rt   <- integer(n_obs)
resp <- integer(n_obs)
for (i in 1:n_obs){
rt[i] <- wienerProcess(v=params[context[i]], a=params[n_condition + 1], ndt=params[n_condition + 2])
resp[i] <- ifelse(rt[i] >= 0, 1, 0)
}
return(list("data" = data_frame("context" = context,
"resp"    = resp,
"rt"      = rt,
"rt_abs"  = abs(rt)),
"params" = params))
}
#------------------------------------------------------------------------#
# Simulation & Fitting
#------------------------------------------------------------------------#
# set initial values
init = function(chains=4) {
L = list()
for (c in 1:chains) {
L[[c]]=list()
L[[c]]$v   = runif(4, 0.5, 4.0)
L[[c]]$a   = runif(1, 0.5, 2.5)
L[[c]]$ndt = runif(1, 0.01, 0.01)
}
return (L)}
n_obs <- 800
# simulate data
simulation <- static_diffusion_simulator(n_obs, 4)
# store data and true parameters
tmp_sim_data <- simulation$data
true_param <- simulation$params
# create stan data list
stan_data = list(
N       = nrow(tmp_sim_data),
correct = tmp_sim_data$resp,
rt      = tmp_sim_data$rt_abs,
min_rt  = min(tmp_sim_data$rt_abs),
context = tmp_sim_data$context)
# fit model
fit <- stan("static_ddm.stan",
init=init(4),
data=stan_data,
chains=4,
iter = 2000,
cores=parallel::detectCores())
# store parameter summary stats
tmp_summary <- as_tibble(summary(fit, pars=c("v[1]", "v[2]", "v[3]", "v[4]", "a", "ndt"))$summary, rownames="parameter")
# store true parameters
tmp_summary <- tmp_summary %>%
mutate(true_param = true_param)
View(tmp_summary)
rgamma(1e5, 1, 20) %>% hist(breaks=100)
rgamma(1e5, 1, 30) %>% hist(breaks=100)
rgamma(1e5, 1, 25) %>% hist(breaks=100)
rgamma(1e5, 3.5, 3) %>% hist(breaks=100)
rgamma(1e5, 1.5, 5.0) %>% hist(breaks=100)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
# filter for one person
df_subset <- df %>%
filter(id == 2)
df_subset <- df_subset %>%
filter(row(df_subset) <= 800)
# create stan data list
stan_data = list(
N       = nrow(df_subset),
correct = df_subset$resp,
rt      = df_subset$rt_abs,
min_rt  = min(df_subset$rt_abs),
context = df_subset$context)
# create stan data list
stan_data = list(
N       = nrow(df_subset),
correct = df_subset$resp,
rt      = df_subset$rt,
min_rt  = min(df_subset$rt),
context = df_subset$context)
View(df_subset)
# create stan data list
stan_data = list(
N       = nrow(df_subset),
correct = df_subset$resp,
rt      = df_subset$rt,
min_rt  = min(df_subset$rt),
context = df_subset$stim_type)
