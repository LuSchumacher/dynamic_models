angle = 360))
p2
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust=1,
margin = margin(r=10),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust=0,
margin = margin(r=10),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.1)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 1, 10)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
color_palette <- c("#2E5868","#B06988")
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
p1
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_smooth(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
p1
x <- seq(-1, 1, 0.001)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 1, 10)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
color_palette <- c("#2E5868","#B06988")
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.0001)
p1
arrangement <- list(p1, p2)
plot_grid(plotlist=arrangement,
# rel_widths = c(2, 1, 1),
nrow = 2,
n_col = 2,
label_size = 16)
plot_grid(plotlist=arrangement,
# rel_widths = c(2, 1, 1),
nrow = 1,
n_col = 2,
label_size = 16)
plot_grid(p1, p2,
nrow = 1,
n_col = 2,
label_size = 16)
plot_grid(p1, p2,
label_size = 16)
plot_grid(p1, p2)
png('/users/lukas/desktop/schematic.png', units="in", width=9, height=5, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=7, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=4, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\ncomparison > standard\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\ncomparison > standard\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.0001)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 2, 5)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
p2 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette)+
ggtitle("Type B error")+
ggthemes::theme_tufte()+
ylab("")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,margin = margin(t = 0, r = 20, b = 0, l = 0),
angle = 360))
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
plot_grid(p1, p2,
rel_widths = c(1.1, 1))
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2,
rel_widths = c(1.1, 1))
dev.off()
plot_grid(p1, p2,
rel_widths = c(1.08, 1))
plot_grid(p1, p2,
rel_widths = c(1, 1))
library(lme4)
library(brms)
rnorm(1e4, 1, 4) %>% hist(breaks=100)
library(tidyverse)
rnorm(1e4, 1, 4) %>% hist(breaks=100)
rnorm(1e4, 1, 2) %>% hist(breaks=100)
rgamma(1e4, 1, 5) %>% hist(breaks=100)
rgamma(1e4, 2, 10) %>% hist(breaks=100)
rgamma(1e4, 2, 1) %>% hist(breaks=100)
library(tidyverse)
df <- read_csv("/Users/lukas/Documents/GitHub/dynamic_models/data/data_lexical_decision.csv")
View(df)
unique(df$id)
tmp <- df %>%
filter(id == id) %>%
select(stim_type,
acc,
rt)
id <- 1
tmp <- df %>%
filter(id == id) %>%
select(stim_type,
acc,
rt)
View(tmp)
View(df)
tmp <- df %>%
filter(id == sub) %>%
select(stim_type,
acc,
rt)
df <- as.data.frame(read_csv("/Users/lukas/Documents/GitHub/dynamic_models/data/data_lexical_decision.csv"))
View(df)
sub <- 1
tmp <- df %>%
filter(id == sub) %>%
select(stim_type,
acc,
rt)
View(tmp)
path <- paste("/Users/lukas/Documents/GitHub/dynamic_models/data/fast_dm/", sub, "errorCoding")
path
path <- paste("/Users/lukas/Documents/GitHub/dynamic_models/data/fast_dm/", sub, "errorCoding", sep = "")
path
path <- paste("/Users/lukas/Documents/GitHub/dynamic_models/data/fast_dm/", sub, "_errorCoding", sep = "")
path
path <- paste("/Users/lukas/Documents/GitHub/dynamic_models/data/fast_dm/", sub, "_errorCoding.dat", sep = "")
write_delim(tmp, path,
delim=" ", col_names=T)
# read data
df <- as.data.frame(read_csv("/Users/lukas/Documents/GitHub/dynamic_models/data/data_lexical_decision.csv"))
# write fast_dm .dat files for each person
for (sub in unique(df$id)){
tmp <- df %>%
filter(id == sub) %>%
select(stim_type,
acc,
rt)
path <- paste("/Users/lukas/Documents/GitHub/dynamic_models/data/fast_dm/", sub, "_errorCoding.dat", sep = "")
write_delim(tmp, path,
delim=" ", col_names=F)
}
View(df)
library(tidyverse)
# read data
df <- as.data.frame(read_csv("/Users/lukas/Documents/GitHub/dynamic_models/data/data_lexical_decision.csv"))
# write fast_dm .dat files for each person
for (sub in unique(df$id)){
tmp <- df %>%
filter(id == sub) %>%
select(stim_type,
resp,
rt)
path <- paste("/Users/lukas/Documents/GitHub/dynamic_models/data/fast_dm/", sub, "_respCoding.dat", sep = "")
write_delim(tmp, path,
delim=" ", col_names=F)
}
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
View(df)
df <- df %>%
filter(rt < 0.2)
write_csv(df, "../../data/data_lexical_decision.csv")
View(df)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
library(tidyverse)
library(magrittr)
df <- read_csv("/users/lukas/desktop/dynamic_model_project/data/raw_data_lexical_decision.csv")
df %<>%
filter(vld == 1) %>%
rename(session = mzp,
block = blk,
trial = trl,
stim_type = typ,
stim = rto,
resp = rsp,
rt = RT,
id = code) %>%
select(id, sex, age, session, block, trial,
stim_type, stim, resp, acc, rt) %>%
mutate(rt = rt/1000,
resp = ifelse(resp == 2, 0, 1),
stim_type = stim_type + 1)
# difficult --> 2, 3
# word --> 1, 2
df$difficult <- NA
df$word <- NA
for (i in 1:nrow(df)){
# difficult
if (df$stim_type[i] == 2 | df$stim_type[i] == 3){
df$difficult[i] <- 1
} else{
df$difficult[i] <- 2
}
# word
if (df$stim_type[i] == 1 | df$stim_type[i] == 2){
df$word[i] <- 1
} else{
df$word[i] <- 2
}
}
# reassign subject id
nr <- 0
df$id[1] <- 1
for (i in 2:length(df$id)){
if (df$id[i] != df$id[i - 1]){
nr <- nr + 1
df$id[df$id == df$id[i]] <- nr
}
}
# order dataframe
df <- df %>%
mutate(id=as.numeric(factor(df$id))) %>%
arrange(id, session, block, trial) %>%
filter(rt > 0.2)
write.csv(df, "/users/lukas/documents/github/dynamic_models/data/data_lexical_decision.csv", row.names = F)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
