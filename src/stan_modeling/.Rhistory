y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.1)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 1, 10)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
color_palette <- c("#2E5868","#B06988")
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
p1
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_smooth(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
p1
x <- seq(-1, 1, 0.001)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 1, 10)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
color_palette <- c("#2E5868","#B06988")
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.0001)
p1
arrangement <- list(p1, p2)
plot_grid(plotlist=arrangement,
# rel_widths = c(2, 1, 1),
nrow = 2,
n_col = 2,
label_size = 16)
plot_grid(plotlist=arrangement,
# rel_widths = c(2, 1, 1),
nrow = 1,
n_col = 2,
label_size = 16)
plot_grid(p1, p2,
nrow = 1,
n_col = 2,
label_size = 16)
plot_grid(p1, p2,
label_size = 16)
plot_grid(p1, p2)
png('/users/lukas/desktop/schematic.png', units="in", width=9, height=5, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=7, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=4, res=1000)
plot_grid(p1, p2)
dev.off()
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\n\"comparison > standard\"\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\ncomparison > standard\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
p1 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette, guide="none")+
ggtitle("Type A error")+
ggthemes::theme_tufte()+
ylab("Probability of a\ncomparison > standard\nresponse")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
hjust = 0,
margin = margin(r=10),
angle = 360))
x <- seq(-1, 1, 0.0001)
y_1 <- sigmoid_fun(x, 1, 5)
y_2 <- sigmoid_fun(x, 2, 5)
df <- data_frame("x" = rep(x, 2),
"pos" = rep(c(1,2), each=length(x)/2),
"y" = c(y_1, y_2))
p2 <- df %>%
ggplot(aes(x=x,
y=y,
color=as.factor(pos))) +
geom_line(size=1) +
scale_color_manual(values = color_palette)+
ggtitle("Type B error")+
ggthemes::theme_tufte()+
ylab("")+
xlab("\nStimulus intensity")+
labs(color = "Position of\ncomparison")+
theme(axis.line = element_line(size = .5, color = "#969696"),
axis.ticks = element_line(color = "#969696"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 12),
text = element_text(size = 12),
plot.title = element_text(size =16,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,margin = margin(t = 0, r = 20, b = 0, l = 0),
angle = 360))
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2)
dev.off()
plot_grid(p1, p2,
rel_widths = c(1.1, 1))
png('/users/lukas/desktop/schematic.png', units="in", width=8, height=3, res=1000)
plot_grid(p1, p2,
rel_widths = c(1.1, 1))
dev.off()
plot_grid(p1, p2,
rel_widths = c(1.08, 1))
plot_grid(p1, p2,
rel_widths = c(1, 1))
# stim_type
#----------------------------------------------------------------------------#
df <- read.csv("/users/lukas/desktop/dynamic_model_project/data/data_lexical_decision.csv")
View(df)
library(tidyverse)
library(magrittr)
stim_type_id_1 <- df %>%
filter(id == 1) %>%
select(stim_type)
stim_type_id_2 <- df %>%
filter(id == 2) %>%
select(stim_type)
View(stim_type_id_1)
View(stim_type_id_2)
View(stim_type_id_1)
View(stim_type_id_2)
library(tidyverse)
library(rstan)
library(bayesplot)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext())
install.packages("rstudioapi")
dirname(rstudioapi::getActiveDocumentContext())
install.packages("rstudioapi")
dirname(rstudioapi::getActiveDocumentContext())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
detach("package:base", unload = TRUE)
rgamma(1e4, 1, 10) %>% hist(breaks=100)
rgamma(1e4, 1, 1) %>% hist(breaks=100)
rgamma(1e4, 2, 1) %>% hist(breaks=100)
rgamma(1e4, 1.5, 1) %>% hist(breaks=100)
rgamma(1e4, 1.5, 2) %>% hist(breaks=100)
rgamma(1e4, 1.5, 0.5) %>% hist(breaks=100)
rgamma(1e5, 1.5, 0.5) %>% hist(breaks=1000)
rgamma(1e5, 1.5, 1) %>% hist(breaks=1000)
rgamma(1e5, 1, 1) %>% hist(breaks=1000)
rgamma(1e5, 1.5, 1.5) %>% hist(breaks=1000)
mean(rgamma(1e5, 1.5, 1.5))
mean(rgamma(1e5, 1.5, 1.5))
mean(rgamma(1e5, 1.5, 1))
rgamma(1e5, 1.5, 1) %>% hist(break=200)
rgamma(1e5, 1.5, 1) %>% hist(breaks=200)
rgamma(1e5, 1.5, 1.5) %>% hist(breaks=200)
rgamma(1e5, 1.5, 1) %>% hist(breaks=200)
rgamma(1e5, 2.5, 20) %>% hist(breaks=200)
rgamma(1e5, 2.5, 10) %>% hist(breaks=200)
rgamma(1e5, 2.5, 5) %>% hist(breaks=200)
rgamma(1e5, 1.5, 5) %>% hist(breaks=200)
rgamma(1e5, 3, 2.5) %>% hist(breaks=200)
rgamma(1e5, 3, 2.0) %>% hist(breaks=200)
rgamma(1e5, 3, 1.5) %>% hist(breaks=200)
rgamma(1e5, 3, 1.0) %>% hist(breaks=200)
rgamma(1e5, 3, 2.5) %>% hist(breaks=200)
rgamma(1e5, 3, 3) %>% hist(breaks=200)
rgamma(1e5, 3.5, 3) %>% hist(breaks=200)
rgamma(1e5, 1, 20) %>% hist(breaks=200)
rgamma(1e5, 1, 25) %>% hist(breaks=200)
rgamma(1e5, 1.1, 25) %>% hist(breaks=200)
rgamma(1e5, 1.1, 30) %>% hist(breaks=200)
rgamma(1e5, 1.1, 50) %>% hist(breaks=200)
rgamma(1e5, 1.1, 40) %>% hist(breaks=200)
rgamma(1e5, 1.1, 30) %>% hist(breaks=200)
rgamma(1e5, 1.0, 25) %>% hist(breaks=200)
rgamma(1e5, 1.0, 20) %>% hist(breaks=200)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
View(df)
library(tidyverse)
library(magrittr)
df <- read_csv("/users/lukas/desktop/dynamic_model_project/data/raw_data_lexical_decision.csv")
df %<>%
filter(vld == 1) %>%
rename(session=mzp,
block=blk,
trial=trl,
stim_type=typ,
stim=rto,
resp=rsp,
rt=RT,
id=code) %>%
select(id, sex, age, session, block, trial,
stim_type, stim, resp, acc, rt) %>%
mutate(rt=rt/1000)
# reassign subject id
nr <- 0
df$id[1] <- 1
for (i in 2:length(df$id)){
if (df$id[i] != df$id[i - 1]){
nr <- nr + 1
df$id[df$id == df$id[i]] <- nr
}
}
df <- df %>%
mutate(id=as.numeric(factor(df$id))) %>%
arrange(id, session, block, trial)
View(df)
View(df)
df <- df %>%
mutate(id=as.numeric(factor(df$id))) %>%
arrange(id, session, block, trial) %>%
mutate(resp = ifelse(resp == 2, 0, 1))
View(df)
write.csv(df, "/users/lukas/desktop/dynamic_model_project/data/data_lexical_decision.csv", row.names = F)
write.csv(df, "/users/lukas/documents/github/dynamic_models/data/dynamic_model_project/data/data_lexical_decision.csv", row.names = F)
write.csv(df, "/users/lukas/documents/github/dynamic_models/data/data_lexical_decision.csv", row.names = F)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
library(tidyverse)
library(magrittr)
df <- read_csv("/users/lukas/desktop/dynamic_model_project/data/raw_data_lexical_decision.csv")
df %<>%
filter(vld == 1) %>%
rename(session=mzp,
block=blk,
trial=trl,
stim_type=typ,
stim=rto,
resp=rsp,
rt=RT,
id=code) %>%
select(id, sex, age, session, block, trial,
stim_type, stim, resp, acc, rt) %>%
mutate(rt=rt/1000)
# reassign subject id
nr <- 0
df$id[1] <- 1
for (i in 2:length(df$id)){
if (df$id[i] != df$id[i - 1]){
nr <- nr + 1
df$id[df$id == df$id[i]] <- nr
}
}
df <- df %>%
mutate(id=as.numeric(factor(df$id))) %>%
arrange(id, session, block, trial) %>%
mutate(resp = ifelse(resp == 2, 0, 1))
View(df)
write.csv(df, "/users/lukas/documents/github/dynamic_models/data/data_lexical_decision.csv", row.names = F)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
View(df)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
# filter for one person
df_subset <- df %>%
filter(id == 2)
View(df_subset)
runif(1,0.5,2)
View(df)
View(df_subset)
runif(1, 0.3, 2.5)
runif(4, 0.3, 6.0)
library(tidyverse)
library(rstan)
library(bayesplot)
# set working directory to script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read data
df <- read_csv("../../data/data_lexical_decision.csv")
# filter for one person
df_subset <- df %>%
filter(id == 2)
# create stan data list
stan_data = list(
N         = nrow(df_subset),
resp      = df$resp,
rt        = df$rt,
stim_type = df$stim_type,
)
# set initial values
init = function(chains=4) {
L = list()
for (c in 1:chains) {
L[[c]]=list()
L[[c]]$v     = runif(4, 0.3, 6.0)
L[[c]]$a     = runif(1, 0.3, 2.5)
L[[c]]$ndt   = runif(1, 0.1, 0.2)
L[[c]]$v_s   = runif(4, 0.01, 0.1)
L[[c]]$a_s   = runif(1, 0.01, 0.1)
L[[c]]$ndt_S = rnorm(1, 0.01, 0.1)
}
return (L)
}
dirname(rstudioapi::getActiveDocumentContext()$path)
fit <- stan("dynamic_ddm.stan",
init=init(1),
data=stan_data,
chains=1,
iter = 500,
cores=parallel::detectCores(),
control = list(adapt_delta=0.95))
# create stan data list
stan_data = list(
N         = nrow(df_subset),
resp      = df$resp,
rt        = df$rt,
stim_type = df$stim_type,
)
# create stan data list
stan_data = list(
N         = nrow(df_subset),
resp      = df$resp,
rt        = df$rt,
stim_type = df$stim_type
)
fit <- stan("dynamic_ddm.stan",
init=init(1),
data=stan_data,
chains=1,
iter = 500,
cores=parallel::detectCores(),
control = list(adapt_delta=0.95))
gc()
